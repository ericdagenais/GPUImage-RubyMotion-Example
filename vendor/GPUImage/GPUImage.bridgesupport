<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='GPUByteColorVector' type='{GPUByteColorVector=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;alpha&quot;C}'>
<field name='red' declared_type='GLubyte' type='C'/>
<field name='green' declared_type='GLubyte' type='C'/>
<field name='blue' declared_type='GLubyte' type='C'/>
<field name='alpha' declared_type='GLubyte' type='C'/>
</struct>
<struct name='GPUMatrix3x3' type='{GPUMatrix3x3=&quot;one&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}&quot;two&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}&quot;three&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}}'>
<field name='one' declared_type='GPUVector3' type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}'/>
<field name='two' declared_type='GPUVector3' type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}'/>
<field name='three' declared_type='GPUVector3' type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}'/>
</struct>
<struct name='GPUMatrix4x4' type='{GPUMatrix4x4=&quot;one&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;two&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;three&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;four&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}}'>
<field name='one' declared_type='GPUVector4' type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}'/>
<field name='two' declared_type='GPUVector4' type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}'/>
<field name='three' declared_type='GPUVector4' type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}'/>
<field name='four' declared_type='GPUVector4' type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}'/>
</struct>
<struct name='GPUVector3' type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}'>
<field name='one' declared_type='GLfloat' type='f'/>
<field name='two' declared_type='GLfloat' type='f'/>
<field name='three' declared_type='GLfloat' type='f'/>
</struct>
<struct name='GPUVector4' type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}'>
<field name='one' declared_type='GLfloat' type='f'/>
<field name='two' declared_type='GLfloat' type='f'/>
<field name='three' declared_type='GLfloat' type='f'/>
<field name='four' declared_type='GLfloat' type='f'/>
</struct>
<constant name='kGPUImageLuminanceFragmentShaderString' declared_type='NSString*' const='true' type='@'/>
<constant name='kGPUImageNearbyTexelSamplingVertexShaderString' declared_type='NSString*' const='true' type='@'/>
<constant name='kGPUImagePassthroughFragmentShaderString' declared_type='NSString*' const='true' type='@'/>
<constant name='kGPUImageVertexShaderString' declared_type='NSString*' const='true' type='@'/>
<enum name='kGPUImageFillModePreserveAspectRatio' value='1'/>
<enum name='kGPUImageFillModePreserveAspectRatioAndFill' value='2'/>
<enum name='kGPUImageFillModeStretch' value='0'/>
<enum name='kGPUImageFlipHorizonal' value='3'/>
<enum name='kGPUImageFlipVertical' value='2'/>
<enum name='kGPUImageHistogramBlue' value='2'/>
<enum name='kGPUImageHistogramGreen' value='1'/>
<enum name='kGPUImageHistogramLuminance' value='4'/>
<enum name='kGPUImageHistogramRGB' value='3'/>
<enum name='kGPUImageHistogramRed' value='0'/>
<enum name='kGPUImageRotateLeft' value='0'/>
<enum name='kGPUImageRotateRight' value='1'/>
<enum name='kGPUImageRotateRightFlipVertical' value='4'/>
<function name='runOnMainQueueWithoutDeadlocking'>
<arg name='block' function_pointer='true' declared_type='void (^)(void)' type='@?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<class name='GLProgram'>
<method selector='addAttribute:'>
<arg name='attributeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='attributeIndex:'>
<arg name='attributeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='fragmentShaderLog'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initWithVertexShaderFilename:fragmentShaderFilename:'>
<arg name='vShaderFilename' declared_type='NSString*' type='@' index='0'/>
<arg name='fShaderFilename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVertexShaderString:fragmentShaderFilename:'>
<arg name='vShaderString' declared_type='NSString*' type='@' index='0'/>
<arg name='fShaderFilename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVertexShaderString:fragmentShaderString:'>
<arg name='vShaderString' declared_type='NSString*' type='@' index='0'/>
<arg name='fShaderString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='link'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='programLog'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='uniformIndex:'>
<arg name='uniformName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='use'>
<retval declared_type='void' type='v'/>
</method>
<method selector='validate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='vertexShaderLog'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='GPUImage3x3ConvolutionFilter'>
<method selector='convolutionKernel'>
<retval declared_type='GPUMatrix3x3' type='{GPUMatrix3x3={GPUVector3=fff}{GPUVector3=fff}{GPUVector3=fff}}'/>
</method>
<method selector='setConvolutionKernel:'>
<arg name='convolutionKernel' declared_type='GPUMatrix3x3' type='{GPUMatrix3x3={GPUVector3=fff}{GPUVector3=fff}{GPUVector3=fff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageBrightnessFilter'>
<method selector='brightness'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBrightness:'>
<arg name='brightness' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageBulgeDistortionFilter'>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='radius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='scale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setCenter:'>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRadius:'>
<arg name='radius' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScale:'>
<arg name='scale' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageCannyEdgeDetectionFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageHeightFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageWidthFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageHeightFactor:'>
<arg name='imageHeightFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageWidthFactor:'>
<arg name='imageWidthFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setThreshold:'>
<arg name='threshold' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='threshold'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageChromaKeyBlendFilter'>
<method selector='setColorToReplaceRed:green:blue:'>
<arg name='redComponent' declared_type='GLfloat' type='f' index='0'/>
<arg name='greenComponent' declared_type='GLfloat' type='f' index='1'/>
<arg name='blueComponent' declared_type='GLfloat' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSmoothing:'>
<arg name='smoothing' declared_type='GLfloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setThresholdSensitivity:'>
<arg name='thresholdSensitivity' declared_type='GLfloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='smoothing'>
<retval declared_type='GLfloat' type='f'/>
</method>
<method selector='thresholdSensitivity'>
<retval declared_type='GLfloat' type='f'/>
</method>
</class>
<class name='GPUImageColorMatrixFilter'>
<method selector='colorMatrix'>
<retval declared_type='GPUMatrix4x4' type='{GPUMatrix4x4={GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}}'/>
</method>
<method selector='intensity'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setColorMatrix:'>
<arg name='colorMatrix' declared_type='GPUMatrix4x4' type='{GPUMatrix4x4={GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntensity:'>
<arg name='intensity' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageContrastFilter'>
<method selector='contrast'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setContrast:'>
<arg name='contrast' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageCropFilter'>
<method selector='cropRegion'>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='initWithCropRegion:'>
<arg name='newCropRegion' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setCropRegion:'>
<arg name='cropRegion' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageDissolveBlendFilter'>
<method selector='mix'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setMix:'>
<arg name='mix' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageEmbossFilter'>
<method selector='intensity'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setIntensity:'>
<arg name='intensity' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageExposureFilter'>
<method selector='exposure'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setExposure:'>
<arg name='exposure' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageFastBlurFilter'>
<method selector='blurPasses'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurPasses:'>
<arg name='blurPasses' declared_type='NSUInteger' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageFilter'>
<method selector='createFilterFBOofSize:'>
<arg name='currentFBOSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='destroyFilterFBO'>
<retval declared_type='void' type='v'/>
</method>
<method selector='informTargetsAboutNewFrameAtTime:'>
<arg name='frameTime' declared_type='CMTime' type='{_CMTime=qiIq}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithFragmentShaderFromFile:'>
<arg name='fragmentShaderFilename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFragmentShaderFromString:'>
<arg name='fragmentShaderString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVertexShaderFromString:fragmentShaderFromString:'>
<arg name='vertexShaderString' declared_type='NSString*' type='@' index='0'/>
<arg name='fragmentShaderString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initializeAttributes'>
<retval declared_type='void' type='v'/>
</method>
<method selector='recreateFilterFBO'>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderToTextureWithVertices:textureCoordinates:sourceTexture:'>
<arg name='vertices' declared_type='GLfloat*' const='true' type='^f' index='0'/>
<arg name='textureCoordinates' declared_type='GLfloat*' const='true' type='^f' index='1'/>
<arg name='sourceTexture' declared_type='GLuint' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColorRed:green:blue:alpha:'>
<arg name='redComponent' declared_type='GLfloat' type='f' index='0'/>
<arg name='greenComponent' declared_type='GLfloat' type='f' index='1'/>
<arg name='blueComponent' declared_type='GLfloat' type='f' index='2'/>
<arg name='alphaComponent' declared_type='GLfloat' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFilterFBO'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloat:forUniform:'>
<arg name='newFloat' declared_type='GLfloat' type='f' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatArray:length:forUniform:'>
<arg name='array' declared_type='GLfloat*' type='^f' index='0'/>
<arg name='count' declared_type='GLsizei' type='i' index='1'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatVec3:forUniform:'>
<arg name='newVec3' declared_type='GLfloat*' type='^f' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatVec4:forUniform:'>
<arg name='newVec4' declared_type='GLfloat*' type='^f' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInteger:forUniform:'>
<arg name='newInteger' declared_type='GLint' type='i' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOutputFBO'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPoint:forUniform:'>
<arg name='newPoint' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:forUniform:'>
<arg name='newSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<arg name='uniformName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setupFilterForSize:'>
<arg name='filterFrameSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeOfFBO'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='GPUImageFilterGroup'>
<method selector='addFilter:'>
<arg name='newFilter' declared_type='GPUImageOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='filterAtIndex:'>
<arg name='filterIndex' declared_type='NSUInteger' type='I' index='0'/>
<retval declared_type='GPUImageOutput*' type='@'/>
</method>
<method selector='initialFilters'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setInitialFilters:'>
<arg name='initialFilters' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTerminalFilter:'>
<arg name='terminalFilter' declared_type='GPUImageOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='terminalFilter'>
<retval declared_type='GPUImageOutput*' type='@'/>
</method>
</class>
<class name='GPUImageFilterPipeline'>
<method selector='addFilter:'>
<arg name='filter' declared_type='GPUImageFilter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addFilter:atIndex:'>
<arg name='filter' declared_type='GPUImageFilter*' type='@' index='0'/>
<arg name='insertIndex' declared_type='NSUInteger' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='currentFilteredFrame'>
<retval declared_type='id' type='@'/>
</method>
<method selector='filters'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='initWithConfiguration:input:output:'>
<arg name='configuration' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='input' declared_type='GPUImageOutput*' type='@' index='1'/>
<arg name='output' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithConfigurationFile:input:output:'>
<arg name='configuration' declared_type='NSURL*' type='@' index='0'/>
<arg name='input' declared_type='GPUImageOutput*' type='@' index='1'/>
<arg name='output' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithOrderedFilters:input:output:'>
<arg name='filters' declared_type='NSArray*' type='@' index='0'/>
<arg name='input' declared_type='GPUImageOutput*' type='@' index='1'/>
<arg name='output' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='input'>
<retval declared_type='GPUImageOutput*' type='@'/>
</method>
<method selector='output'>
<retval declared_type='id' type='@'/>
</method>
<method selector='removeAllFilters'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFilterAtIndex:'>
<arg name='index' declared_type='NSUInteger' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceAllFilters:'>
<arg name='newFilters' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceFilterAtIndex:withFilter:'>
<arg name='index' declared_type='NSUInteger' type='I' index='0'/>
<arg name='filter' declared_type='GPUImageFilter*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFilters:'>
<arg name='filters' declared_type='NSMutableArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInput:'>
<arg name='input' declared_type='GPUImageOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOutput:'>
<arg name='output' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageGammaFilter'>
<method selector='gamma'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setGamma:'>
<arg name='gamma' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageGaussianBlurFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGaussianValues'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageGaussianSelectiveBlurFilter'>
<method selector='excludeBlurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='excludeCirclePoint'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='excludeCircleRadius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setExcludeBlurSize:'>
<arg name='excludeBlurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExcludeCirclePoint:'>
<arg name='excludeCirclePoint' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExcludeCircleRadius:'>
<arg name='excludeCircleRadius' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageHarrisCornerDetectionFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageHazeFilter'>
<method selector='distance'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setDistance:'>
<arg name='distance' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSlope:'>
<arg name='slope' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='slope'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageHistogramFilter'>
<method selector='downsamplingFactor'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='generatePointCoordinates'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithHistogramType:'>
<arg name='newHistogramType' declared_type='GPUImageHistogramType' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDownsamplingFactor:'>
<arg name='downsamplingFactor' declared_type='NSUInteger' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageKuwaharaFilter'>
<method selector='radius'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='setRadius:'>
<arg name='radius' declared_type='GLuint' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageLuminanceThresholdFilter'>
<method selector='setThreshold:'>
<arg name='threshold' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='threshold'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageMovie'>
<method selector='enableSynchronizedEncodingUsingMovieWriter:'>
<arg name='movieWriter' declared_type='GPUImageMovieWriter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endProcessing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='processMovieFrame:'>
<arg name='movieSampleBuffer' declared_type='CMSampleBufferRef' type='^{opaqueCMSampleBuffer=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='readNextAudioSampleFromOutput:'>
<arg name='readerAudioTrackOutput' declared_type='AVAssetReaderTrackOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='readNextVideoFrameFromOutput:'>
<arg name='readerVideoTrackOutput' declared_type='AVAssetReaderTrackOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runBenchmark'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setRunBenchmark:'>
<arg name='runBenchmark' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUrl:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startProcessing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='url'>
<retval declared_type='NSURL*' type='@'/>
</method>
</class>
<class name='GPUImageMovieWriter'>
<method selector='audioInputReadyCallback'>
<retval function_pointer='true' declared_type='void (^)(void)' type='@?'>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='completionBlock'>
<retval function_pointer='true' declared_type='void (^)(void)' type='@?'>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='enableSynchronizationCallbacks'>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodingLiveVideo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='failureBlock'>
<retval function_pointer='true' declared_type='void (^)(NSError *)' type='@?'>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='finishRecording'>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasAudioTrack'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithMovieURL:size:'>
<arg name='newMovieURL' declared_type='NSURL*' type='@' index='0'/>
<arg name='newSize' declared_type='CGSize' type='{CGSize=ff}' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='processAudioBuffer:'>
<arg name='audioBuffer' declared_type='CMSampleBufferRef' type='^{opaqueCMSampleBuffer=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAudioInputReadyCallback:'>
<arg name='audioInputReadyCallback' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompletionBlock:'>
<arg name='completionBlock' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEncodingLiveVideo:'>
<arg name='encodingLiveVideo' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFailureBlock:'>
<arg name='failureBlock' function_pointer='true' declared_type='void (^)(NSError *)' type='@?' index='0'>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasAudioTrack:'>
<arg name='hasAudioTrack' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldPassthroughAudio:'>
<arg name='shouldPassthroughAudio' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVideoInputReadyCallback:'>
<arg name='videoInputReadyCallback' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldPassthroughAudio'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startRecording'>
<retval declared_type='void' type='v'/>
</method>
<method selector='videoInputReadyCallback'>
<retval function_pointer='true' declared_type='void (^)(void)' type='@?'>
<retval declared_type='void' type='v'/>
</retval>
</method>
</class>
<class name='GPUImageOpenGLESContext'>
<method selector='context'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='maximumTextureSizeForThisDevice' class_method='true'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='maximumTextureUnitsForThisDevice' class_method='true'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='presentBufferForDisplay'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedImageProcessingOpenGLESContext' class_method='true'>
<retval declared_type='GPUImageOpenGLESContext*' type='@'/>
</method>
<method selector='supportsFastTextureUpload' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='useImageProcessingContext' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageOutput'>
<method selector='addTarget:'>
<arg name='newTarget' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addTarget:atTextureLocation:'>
<arg name='newTarget' declared_type='id' type='@' index='0'/>
<arg name='textureLocation' declared_type='NSInteger' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='audioEncodingTarget'>
<retval declared_type='GPUImageMovieWriter*' type='@'/>
</method>
<method selector='deleteOutputTexture'>
<retval declared_type='void' type='v'/>
</method>
<method selector='forceProcessingAtSize:'>
<arg name='frameSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='imageByFilteringImage:'>
<arg name='imageToFilter' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageFromCurrentlyProcessedOutput'>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageFromCurrentlyProcessedOutputWithOrientation:'>
<arg name='imageOrientation' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initializeOutputTexture'>
<retval declared_type='void' type='v'/>
</method>
<method selector='prepareForImageCapture'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllTargets'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTarget:'>
<arg name='targetToRemove' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAudioEncodingTarget:'>
<arg name='audioEncodingTarget' declared_type='GPUImageMovieWriter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInputTextureForTarget:atIndex:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<arg name='inputTextureIndex' declared_type='NSInteger' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldIgnoreUpdatesToThisTarget:'>
<arg name='shouldIgnoreUpdatesToThisTarget' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldSmoothlyScaleOutput:'>
<arg name='shouldSmoothlyScaleOutput' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTargetToIgnoreForUpdates:'>
<arg name='targetToIgnoreForUpdates' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldIgnoreUpdatesToThisTarget'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldSmoothlyScaleOutput'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='targetToIgnoreForUpdates'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='GPUImagePicture'>
<method selector='initWithImage:'>
<arg name='newImageSource' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithImage:smoothlyScaleOutput:'>
<arg name='newImageSource' declared_type='id' type='@' index='0'/>
<arg name='smoothlyScaleOutput' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='processImage'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImagePinchDistortionFilter'>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='radius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='scale'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setCenter:'>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRadius:'>
<arg name='radius' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScale:'>
<arg name='scale' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImagePixellateFilter'>
<method selector='fractionalWidthOfAPixel'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setFractionalWidthOfAPixel:'>
<arg name='fractionalWidthOfAPixel' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImagePolarPixellateFilter'>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='pixelSize'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='setCenter:'>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixelSize:'>
<arg name='pixelSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImagePosterizeFilter'>
<method selector='colorLevels'>
<retval declared_type='NSUInteger' type='I'/>
</method>
<method selector='setColorLevels:'>
<arg name='colorLevels' declared_type='NSUInteger' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageRawData'>
<method selector='colorAtLocation:'>
<arg name='locationInImage' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='GPUByteColorVector' type='{GPUByteColorVector=CCCC}'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithImageSize:'>
<arg name='newImageSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rawBytesForImage'>
<retval declared_type='GLubyte*' type='*'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageRotationFilter'>
<method selector='initWithRotation:'>
<arg name='newRotationMode' declared_type='GPUImageRotationMode' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='GPUImageSaturationFilter'>
<method selector='saturation'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setSaturation:'>
<arg name='saturation' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageSharpenFilter'>
<method selector='setSharpness:'>
<arg name='sharpness' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharpness'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageSmoothToonFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageHeightFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageWidthFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='quantizationLevels'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageHeightFactor:'>
<arg name='imageHeightFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageWidthFactor:'>
<arg name='imageWidthFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setQuantizationLevels:'>
<arg name='quantizationLevels' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setThreshold:'>
<arg name='threshold' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='threshold'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageSobelEdgeDetectionFilter'>
<method selector='imageHeightFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageWidthFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setImageHeightFactor:'>
<arg name='imageHeightFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageWidthFactor:'>
<arg name='imageWidthFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageStillCamera'>
<method selector='capturePhotoProcessedUpToFilter:withCompletionHandler:'>
<arg name='finalFilterInChain' declared_type='GPUImageOutput*' type='@' index='0'/>
<arg name='block' function_pointer='true' declared_type='void (^)(int *, NSError *)' type='@?' index='1'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageStretchDistortionFilter'>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='setCenter:'>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageSwirlFilter'>
<method selector='angle'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='center'>
<retval declared_type='CGPoint' type='{CGPoint=ff}'/>
</method>
<method selector='radius'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setAngle:'>
<arg name='angle' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenter:'>
<arg name='center' declared_type='CGPoint' type='{CGPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRadius:'>
<arg name='radius' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageTextureInput'>
<method selector='initWithTexture:size:'>
<arg name='newInputTexture' declared_type='GLuint' type='I' index='0'/>
<arg name='newTextureSize' declared_type='CGSize' type='{CGSize=ff}' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='processTexture'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageTextureOutput'>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='texture'>
<retval declared_type='GLint' type='i'/>
</method>
</class>
<class name='GPUImageThresholdEdgeDetection'>
<method selector='setThreshold:'>
<arg name='threshold' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='threshold'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageTiltShiftFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='bottomFocusLevel'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='focusFallOffRate'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBottomFocusLevel:'>
<arg name='bottomFocusLevel' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFocusFallOffRate:'>
<arg name='focusFallOffRate' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTopFocusLevel:'>
<arg name='topFocusLevel' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='topFocusLevel'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageToonFilter'>
<method selector='imageHeightFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='imageWidthFactor'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='quantizationLevels'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setImageHeightFactor:'>
<arg name='imageHeightFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageWidthFactor:'>
<arg name='imageWidthFactor' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setQuantizationLevels:'>
<arg name='quantizationLevels' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setThreshold:'>
<arg name='threshold' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='threshold'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='GPUImageTransformFilter'>
<method selector='affineTransform'>
<retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
</method>
<method selector='ignoreAspectRatio'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAffineTransform:'>
<arg name='affineTransform' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoreAspectRatio:'>
<arg name='ignoreAspectRatio' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransform3D:'>
<arg name='transform3D' declared_type='CATransform3D' type='{CATransform3D=ffffffffffffffff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='transform3D'>
<retval declared_type='CATransform3D' type='{CATransform3D=ffffffffffffffff}'/>
</method>
</class>
<class name='GPUImageTwoPassFilter'>
<method selector='initWithFirstStageFragmentShaderFromString:secondStageFragmentShaderFromString:'>
<arg name='firstStageFragmentShaderString' declared_type='NSString*' type='@' index='0'/>
<arg name='secondStageFragmentShaderString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFirstStageVertexShaderFromString:firstStageFragmentShaderFromString:secondStageVertexShaderFromString:secondStageFragmentShaderFromString:'>
<arg name='firstStageVertexShaderString' declared_type='NSString*' type='@' index='0'/>
<arg name='firstStageFragmentShaderString' declared_type='NSString*' type='@' index='1'/>
<arg name='secondStageVertexShaderString' declared_type='NSString*' type='@' index='2'/>
<arg name='secondStageFragmentShaderString' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='GPUImageUnsharpMaskFilter'>
<method selector='blurSize'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='intensity'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='setBlurSize:'>
<arg name='blurSize' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntensity:'>
<arg name='intensity' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageVideoCamera'>
<method selector='averageFrameDurationDuringCapture'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='captureSession'>
<retval declared_type='AVCaptureSession*' type='@'/>
</method>
<method selector='getCameraPosition'>
<retval declared_type='AVCaptureDevicePosition' type='i'/>
</method>
<method selector='initWithSessionPreset:cameraPosition:'>
<arg name='sessionPreset' declared_type='NSString*' type='@' index='0'/>
<arg name='cameraPosition' declared_type='AVCaptureDevicePosition' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='inputCamera'>
<retval declared_type='AVCaptureDevice*' type='@'/>
</method>
<method selector='processAudioSampleBuffer:'>
<arg name='sampleBuffer' declared_type='CMSampleBufferRef' type='^{opaqueCMSampleBuffer=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='processVideoSampleBuffer:'>
<arg name='sampleBuffer' declared_type='CMSampleBufferRef' type='^{opaqueCMSampleBuffer=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeInputsAndOutputs'>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotateCamera'>
<retval declared_type='void' type='v'/>
</method>
<method selector='runBenchmark'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setRunBenchmark:'>
<arg name='runBenchmark' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startCameraCapture'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopCameraCapture'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='GPUImageView'>
<method selector='fillMode'>
<retval declared_type='GPUImageFillModeType' type='i'/>
</method>
<method selector='setBackgroundColorRed:green:blue:alpha:'>
<arg name='redComponent' declared_type='GLfloat' type='f' index='0'/>
<arg name='greenComponent' declared_type='GLfloat' type='f' index='1'/>
<arg name='blueComponent' declared_type='GLfloat' type='f' index='2'/>
<arg name='alphaComponent' declared_type='GLfloat' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFillMode:'>
<arg name='fillMode' declared_type='GPUImageFillModeType' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeInPixels'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
</class>
<class name='GPUImageVignetteFilter'>
<method selector='setX:'>
<arg name='x' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setY:'>
<arg name='y' declared_type='CGFloat' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='x'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='y'>
<retval declared_type='CGFloat' type='f'/>
</method>
</class>
<class name='NSObject'>
<method selector='endProcessing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='maximumOutputSize'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method selector='movieRecordingCompleted'>
<retval declared_type='void' type='v'/>
</method>
<method selector='movieRecordingFailedWithError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='newFrameReadyAtTime:'>
<arg name='frameTime' declared_type='CMTime' type='{_CMTime=qiIq}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='newFrameReadyFromTextureOutput:'>
<arg name='callbackTextureOutput' declared_type='GPUImageTextureOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='newImageFrameAvailableFromDataSource:'>
<arg name='rawDataSource' declared_type='GPUImageRawData*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='nextAvailableTextureIndex'>
<retval declared_type='NSInteger' type='i'/>
</method>
<method selector='setInputSize:'>
<arg name='newSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInputTexture:atIndex:'>
<arg name='newInputTexture' declared_type='GLuint' type='I' index='0'/>
<arg name='textureIndex' declared_type='NSInteger' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldIgnoreUpdatesToThisTarget'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<informal_protocol name='GPUImageInput'>
<method type='v8@0:4' selector='endProcessing'>
<retval declared_type='void' type='v'/>
</method>
<method type='{CGSize=ff}8@0:4' selector='maximumOutputSize'>
<retval declared_type='CGSize' type='{CGSize=ff}'/>
</method>
<method type='v32@0:4{?=qiIq}8' selector='newFrameReadyAtTime:'>
<arg name='frameTime' declared_type='CMTime' type='{_CMTime=qiIq}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type='i8@0:4' selector='nextAvailableTextureIndex'>
<retval declared_type='NSInteger' type='i'/>
</method>
<method type='v16@0:4{CGSize=ff}8' selector='setInputSize:'>
<arg name='newSize' declared_type='CGSize' type='{CGSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type='v16@0:4I8i12' selector='setInputTexture:atIndex:'>
<arg name='newInputTexture' declared_type='GLuint' type='I' index='0'/>
<arg name='textureIndex' declared_type='NSInteger' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type='B8@0:4' selector='shouldIgnoreUpdatesToThisTarget'>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageMovieWriterDelegate'>
<method type='v8@0:4' selector='movieRecordingCompleted'>
<retval declared_type='void' type='v'/>
</method>
<method type='v12@0:4@8' selector='movieRecordingFailedWithError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageRawDataProcessor'>
<method type='v12@0:4@8' selector='newImageFrameAvailableFromDataSource:'>
<arg name='rawDataSource' declared_type='GPUImageRawData*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageTextureOutputDelegate'>
<method type='v12@0:4@8' selector='newFrameReadyFromTextureOutput:'>
<arg name='callbackTextureOutput' declared_type='GPUImageTextureOutput*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
</signatures>
